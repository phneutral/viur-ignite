@charset "UTF-8";
/* FORM PARTS */

// Prefixes and objects:
// .input
// .label
// .select
// .form-group
// .textarea
// .switch
// .radio
// .check
// .option-group
// .input-group

// Adjustments:

// Padding:
@inputPadding: @defaultPadding;
@inputMargin: @defaultMargin;

// Colors and shadows:
@inputColor: @defaultInputColor;
@inputValidColor: @successColor;
@inputDangerColor: @failColor;
@inputHintColor: @hintColor;
@inputRequiredColor: @mainColor;

@inputShadow: @defaultShadow;
@inputShadowHover: @defaultShadowHover;
@inputShadowColor: @defaultShadowColor;

@inputPadding:@defaultPadding;
@inputMargin:@defaultMargin;

@inputBorderRadius:@defaultBorderRadius;
@inputBorderWidth:@defaultBorderWidth;
@inputBorderColor:darken(@defaultInputColor,10%);


// Arrows (up and down) in base64:
.arrowsUpDownBg() {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 137.14286 50" height="50" width="80"><path d="M0 16.429l30-34.286 30 34.286H0zm0 17.142l30 34.286 30-34.286H0z"/></svg>');
}

& when (@form=true) {
/* Input */
.input {
  .basicInput;
  background-color: @inputColor;
  color:contrast(@inputColor, #222222, #f4f4f4);
  white-space: nowrap;
  text-overflow: ellipsis;
  min-width: 0;
  flex:1;
  max-width: 100%;
  transition: all .3s ease;
  background-position: 150% center;
  background-size: 15px;
  background-repeat: no-repeat;
  .form-group--validation &,
  .input-group--validation &,
  &--validation {
    .input-group.is-invalid &,
    &.is-invalid,
    &[aria-invalid="true"],
    &:invalid:not(:placeholder-shown) {
      .inputValidation(@inputColor, @inputDangerColor, @backgroundImage:'../icons/cross.svg', @cursor:false, @focus:true);
    }
    .input-group.is-recommended &,
    &.is-recommended {
      .inputValidation(@inputColor, @inputHintColor, @backgroundImage:'../icons/pen.svg', @cursor:false, @focus:true);
    }
    .input-group.is-valid &,
    &.is-valid,
    &[aria-invalid="false"],
    &:valid:not(:placeholder-shown):not([type="password"]) {
      .inputValidation(@inputColor, @inputValidColor, @backgroundImage:'../icons/check.svg', @cursor:false, @focus:true);
    }
  }
  &.is-readonly,
  &:read-only,
  &[aria-readonly="true"]{
    .inputValidation(@inputColor, darken(@inputColor, 50%), @cursor:auto);
    .boxShadow(0);
    border-style: dashed;
    border-bottom-style: solid;
  }
  &.is-disabled,
  &:disabled,
  &[aria-disabled="true"] {
    .inputValidation(@inputColor, darken(@inputColor,15%), @backgroundImage:'../icons/not-allowed.svg', @cursor:not-allowed);
    .boxShadow(0);
    border-style: dashed;
  }
  &--contrast {
    background-color: darken(@inputColor,5%);
    border: @defaultBorderWidth solid darken(@inputColor,15%);
    color:contrast(darken(@inputColor,5%), #000000, #ffffff);
  }

  &--small {
    font-size: .8em;
    font-weight: @fontWeightNormal;
  }

  &--large {
    font-size: 1.25em;
  }
}

// .is-secure mit Schlo√üsymbol?

// placeholder text color
.input::-webkit-input-placeholder {color:lighten(contrast(@inputColor, #222222, #f4f4f4), 50%); opacity: 1;}
.input:-moz-placeholder {color:lighten(contrast(@inputColor, #222222, #f4f4f4), 50%); opacity: 1;}
.input::-moz-placeholder {color:lighten(contrast(@inputColor, #222222, #f4f4f4), 50%); opacity: 1;}
.input:-ms-input-placeholder {color:lighten(contrast(@inputColor, #222222, #f4f4f4), 50%); opacity: 1;}

/* Label */
.label {
  .basicInput(@borderColor:darken(@defaultInputColor,12%));
  align-self: flex-start;
  white-space: nowrap;
  background-color: darken(@inputColor,2%);
  color:contrast(darken(@inputColor,2%), #000000, #ffffff);
  min-width: 190px;
  .input-group.is-required &,
  &.is-required {
    border-left: @defaultBorderWidth+1px solid @inputRequiredColor;
    color: @inputRequiredColor;
    font-weight: @fontWeightBold;
  }
  .input-group.is-required &:after,
  &.is-required:after {
    content: '\00a0*';
  }
  .form-group--validation &,
  .input-group--validation &,
  &--validation {
    .input-group.is-invalid &,
    &.is-invalid {
      color: darken(@inputDangerColor, 25%);
      border-color: @inputDangerColor;
      background-color: lighten(@inputDangerColor, 20%);
    }
    .input-group.is-recommended &,
    &.is-recommended {
      color: darken(@inputHintColor, 25%);
      border-color: @inputHintColor;
      background-color: lighten(@inputHintColor, 20%);
    }
    .input-group.is-valid &,
    &.is-valid {
      color: darken(@inputValidColor, 25%);
      border-color: @inputValidColor;
      background-color: lighten(@inputValidColor, 20%);
    }
  }
  &.is-disabled,
  &:disabled {
    color:#777777;
    cursor: not-allowed;
    .boxShadow(0);
    border: @defaultBorderWidth dashed darken(@inputColor,20%);
    background-color: darken(@inputColor, 5%);
  }
  .icon {margin: 0 .25em 0 -.1em;}
  &--small {
    font-size: .8em;
    font-weight: @fontWeightNormal;
    min-width: 90px;
  }

  &--block {
    width: 100%;
    margin: 0;
  }
}


/* Dropdown */
.select  {
  .basicInput(@borderColor:darken(@defaultInputColor,12%));
  //align-self: flex-start;
  max-width: 100%;
  min-width: 0;
  //flex: 1;
  padding-right: 38px;
  background-color: @inputColor;
  .arrowsUpDownBg(); // arrows (up and down) in svg
  background-size: 20px;
  background-repeat: no-repeat;
  background-position: right center;
  transition: all .3s ease;
  &:hover {
    .boxShadow(@inputShadowHover, @inputShadowColor);
  }
  &.is-disabled,
  &:disabled {
    color:#777777;
    cursor: not-allowed;
    .boxShadow(0);
    border: @defaultBorderWidth dashed darken(@inputColor,20%);
    background-color: darken(@inputColor, 5%);
  }
  .form-group--validation &,
  .input-group--validation &,
  &--validation {
    .input-group.is-invalid &,
    &.is-invalid,
    &[aria-invalid="true"],
    &:invalid {
      .inputValidation(@inputColor, @inputDangerColor, @focus:true);
    }
    .input-group.is-valid  &,
    &.is-valid,
    &:valid {
      .inputValidation(@inputColor, @inputValidColor, @focus:true);
    }
  }
  &--small {
    font-size: .8em;
    font-weight: @fontWeightNormal;
    background-size: 10px;
  }
}


/* Text area */
.textarea  {
  resize: none;
  margin: @inputMargin 0;
  padding: @inputPadding @inputPadding*3.75;
  width: 250px;
  height: 180px;
  background-color: @inputColor;
  border: 1px solid darken(@inputColor,10%);
  color:contrast(@inputColor, #222222, #f4f4f4);
  transition: all .3s ease;
  background-position: 150% center;
  background-size: 15px;
  background-repeat: no-repeat;
  text-align: left;
  &--block {
    width:100%;
    margin: 0;
  }
}


/* Switch */
// A simple, yet elegant, boolean switch.
.switch  {
  .basicInput(@borderColor:darken(@defaultInputColor,12%));
  background-color: darken(@inputColor, 2%);
  color: contrast(darken(@inputColor, 2%), #000000, #ffffff);
  &-input {
    display: none;
    &:checked + .switch-label {
      background: lighten(@inputValidColor, 20%);
    }
    &:checked + .switch-label:after {
      left: 50%;
    }
  }
  &-label {
    background: darken(@inputColor, 10%);
    .border-radius(@defaultBorderRadius);
    padding: 2px;
    transition: all .4s ease;
    outline: 0;
    display: block;
    width: 3em;
    height: 1.5em;
    position: relative;
    cursor: pointer;
    user-select: none;
    &:after {
      left: 0;
      position: relative;
      display: block;
      content: "";
      width: 50%;
      height: 100%;
      background: #fff;
      transition: all .2s ease;
      .boxShadow(@inputShadow, @inputShadowColor);
    }
  }
}

.tickbox() {
  .basicInput(@padding: 0;);
  background-color: darken(@inputColor, 2%);
  border: 1px solid darken(@inputColor, 12%);
  color: contrast(darken(@inputColor, 2%), #000000, #ffffff);
  &-input {
    opacity: 0;
    position: absolute;
  }
  &-label {
    position: relative;
    display: flex;
    align-items: center;
    outline: 0;
    cursor: pointer;
    flex-basis: 100%;
    &:before {
      content:'';
      background: #fff;
      border: 2px solid darken(@inputColor, 10%);;
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1em;
      margin-top:-2px;
      text-align: center;
      transition: all .4s ease;
      box-shadow: inset 0 0 0 2px #fff;
    }
    &:not(:empty){
      padding: @inputPadding @inputPadding*3.75;
      &:before {
        margin-right: 10px;
      }
      &:hover {
        background-color: @inputColor;
      }
    }
  }
  &-input:checked + &-label:before {
    background: lighten(@inputValidColor, 20%);
    border: 2px solid lighten(@inputValidColor, 10%);
  }
}


  /* Radio button */
.radio  {
  .tickbox();
  &-label {
    &:before {
      border-radius: 50%;
    }
  }
}

/* Checkbox */
.check {
  .tickbox();
}

/* Option group */
// Group radio buttons or checkboxes together for multi-selection lists.
.option-group {
  display: flex;
  flex-direction: column;
  & .radio,
  & .check {
    width: 100%;
    margin: 0;
    position: relative;
    border-width: 0 @defaultBorderWidth;
    font-weight: @fontWeightLight;
    font-size: .75em;
    &:nth-of-type(even) {
      background-color: darken(@inputColor, 5%);
    }
    &:first-child {
      border-width: @defaultBorderWidth;
      border-bottom-width: 0;
    }
    &:last-child {
      border-width: @defaultBorderWidth;
      border-top-width: 0;
    }
    .mq-min(@breakSmall, {
      width:auto;
    });
    & .radio-label,
    & .check-label {
      padding: @inputPadding*1.5 @inputPadding*3.75;
      padding-right: 1.75em;
    }
  }
  &--selection-list {
    max-height: 150px;
    overflow-y: auto;
    overflow-x: hidden;
    .radio,
    .check {flex:1 0 auto;}
    .radio-label,
    .check-label {
      white-space: nowrap;
      padding-right: 30px;
    }
    .radio:not(:last-child) .radio-label,
    .check:not(:last-child) .check-label {
      border-bottom: @defaultBorderWidth solid darken(@inputColor, 20%);
    }
    .radio-label:before,
    .check-label:before {content:none;}
    .radio-input:checked + .radio-label,
    .check-input:checked + .check-label {
      background: lighten(@inputValidColor, 20%);
      border-bottom: @defaultBorderWidth solid lighten(@inputValidColor, 10%);
      color: #fff;
      &:hover {
        background-color: lighten(@inputValidColor, 10%);;
      }
    }
  }
}


.input,
.label + .input--block,
.label + .textarea--block,
.select,
.switch,
.radio {
  .mq-max(@breakSmall, {
    width: 100%;
    margin: 0;
    margin-bottom: 5px;
  });
}

/* Input group */
// Group buttons, labels and inputs together.
.input-group {
  display: flex;
  flex-direction:column;
  &:not(:last-child) {margin-bottom: @bottomSpace;}
  & .select,
  & .input,
  & .btn,
  & .switch,
  & .textarea,
  & > .radio,
  & > .check,
  & .option-group {
    .zIndex('content', 0);
    width: 100%;
    margin: 0;
    position: relative;
    .boxShadow(0);
    .mq-max(@breakSmall, {margin-top: -1px;});
    // Bring any button into forefront for proper borders given negative margin below
    &:hover,
    &:active,
    &.is-selected {
      .zIndex('content', 2);
    }
    &:focus {
      .zIndex('content', 3);
    }
    &.is-disabled,
    &.is-disabled:hover {
      .zIndex('content', 0)!important; // stay down!
    }
  }
  & .label {
    border-width: 0 @defaultBorderWidth;
    width: 100%;
    margin: 0;
    &:first-child {
      border-width: @defaultBorderWidth;
      border-bottom-width: 0;
    }
    &:last-child {
      border-width: @defaultBorderWidth;
      border-top-width: 0;
    }
  }
  .mq-max(@breakSmall, {
    &:not(.input-group--block) {
      & > *:not(:last-child) {
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 0;
      }
      & > *:not(:first-child) {
        border-top-right-radius: 0;
        border-top-left-radius: 0;
      }
    }
  });
  .mq-min(@breakSmall, {
    &:not(.input-group--block) {
      flex-flow: row;
      & .label {
        border-width: @defaultBorderWidth;
        &:first-child {
          border-right-width:0;
        }
        &:last-child {
          border-left-width: 0;
        }
      }
      & .label,
      & .select,
      & .input,
      & .btn,
      & .switch,
      & .textarea,
      & > .radio,
      & > .check,
      & .option-group {
        margin-left: -1px;
        max-width: 30vw;
        width: auto;
        margin-top: @inputMargin;
        margin-bottom: @inputMargin;
        .boxShadow(@inputShadow,@inputShadowColor);
      }
      & > *:not(:last-child) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }
      & > *:not(:first-child) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    };
  });
}

/* Form group */
// Use formGroups to separate different inputs or input-groups.
.form-group {
  margin-bottom: @bottomSpace;
  &--half {
    .mq-min(@breakMedium, {
      column-count: 2;
      break-inside: avoid;
      column-fill: balance;
      & * {
        break-inside: avoid;
      }
    });
  }
}

}
